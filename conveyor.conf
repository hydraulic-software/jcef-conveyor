include required("#!./gradlew -q printConveyorConfig")

jcef {
  releases = "https://github.com/jcefmaven/jcefmaven/releases/download/"

  // JCEF hides the native files we need inside a tarball, which is then wrapped inside a zip/jar.
  // Conveyor can handle that! We just have to use the syntax zip:https://example.com/foo.zip!/path/in/zip.tar.gz
  // The version numbers here come from the Gradle build.
  windows.amd64 = "zip:"${jcef.releases}${jcef.ver}"/jcef-natives-windows-amd64-jcef-"${jcef.commit-hash}"+cef-"${jcef.cef-ver}".jar!/jcef-natives-windows-amd64-jcef-"${jcef.commit-hash}"+cef-"${jcef.cef-ver}".tar.gz"
  mac.amd64   = "zip:"${jcef.releases}${jcef.ver}"/jcef-natives-macosx-amd64-jcef-"${jcef.commit-hash}"+cef-"${jcef.cef-ver}".jar!/jcef-natives-macosx-amd64-jcef-"${jcef.commit-hash}"+cef-"${jcef.cef-ver}".tar.gz"
  mac.aarch64 = "zip:"${jcef.releases}${jcef.ver}"/jcef-natives-macosx-arm64-jcef-"${jcef.commit-hash}"+cef-"${jcef.cef-ver}".jar!/jcef-natives-macosx-arm64-jcef-"${jcef.commit-hash}"+cef-"${jcef.cef-ver}".tar.gz"
  linux.amd64.glibc = "zip:"${jcef.releases}${jcef.ver}"/jcef-natives-linux-amd64-jcef-"${jcef.commit-hash}"+cef-"${jcef.cef-ver}".jar!/jcef-natives-linux-amd64-jcef-"${jcef.commit-hash}"+cef-"${jcef.cef-ver}".tar.gz"
}

app {
  rdns-name = dev.hydraulic.jcef-conveyor
  vcs-url = github.com/hydraulic-software/jcef-conveyor
  site {
    github {
      oauth-token = ${env.GITHUB_TOKEN}
      pages-branch = gh-pages
    }
  }

  windows {
    amd64.inputs += ${jcef.windows.amd64} -> jcef

    // JCEF expects install.lock to exist which isn't in the tarball, otherwise it tries to delete bits of the app!
    inputs += {
      content = "."
      to = jcef/install.lock
    }
  }

  mac {
    // CEF is a series of frameworks and helper apps. JCEF adds some extra files on top. We get them from the natives tarballs
    // that were downloaded by build.sh
    amd64.bundle-extras += {
      from = ${jcef.mac.amd64}
      to = Frameworks
    }
    aarch64.bundle-extras += {
      from = ${jcef.mac.aarch64}
      to = Frameworks
    }

    // JCEF expects install.lock to exist which isn't in the tarball, otherwise it tries to delete bits of the app!
    bundle-extras += {
      content = "."
      to = Frameworks/install.lock
    }

    // These keys are used by Electron and can also benefit JCEF apps.
    info-plist {
      NSSupportsAutomaticGraphicsSwitching = true
      NSRequiresAquaSystemAppearance = false
      NSHighResolutionCapable = true
      NSQuitAlwaysKeepsWindows = false

      LSEnvironment {
        MallocNanoZone = "0"
      }
      NSAppTransportSecurity {
        NSAllowsArbitraryLoads = true
      }
      NSBluetoothAlwaysUsageDescription = This app needs access to Bluetooth
      NSBluetoothPeripheralUsageDescription = This app needs access to Bluetooth
      NSCameraUsageDescription = This app needs access to the camera
    }
  }

  linux {
    amd64.glibc.inputs += ${jcef.linux.amd64.glibc} -> jcef

    // JCEF expects install.lock to exist which isn't in the tarball, otherwise it tries to delete bits of the app!
    inputs += {
      content = "."
      to = jcef/install.lock
    }
  }
}

conveyor.compatibility-level = 10
