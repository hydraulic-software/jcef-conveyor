// You shouldn't build this directly, run build.sh instead.

include required("/stdlib/jdk/19/amazon.conf")
// include required("/stdlib/jvm/from-maven.conf")

jcef {
	// JCEF Maven version and the version of Chrome itself don't quite match for some reason. C'est la vie.
	maven.ver = 110.0.25
	maven.hash = 87476e9
	chrome.hash = g75b1c96
	chrome.ver = 110.0.5481.78

	releases = "https://github.com/jcefmaven/jcefmaven/releases/download/"

	// JCEF hides the native files we need inside a tarball, which is then wrapped inside a zip/jar <facepalm>.
	// Fortunately, Conveyor can handle that! We just have to use the syntax zip:https://example.com/foo.zip!/path/in/zip.tar.gz
	mac.amd64   = "zip:"${jcef.releases}${jcef.maven.ver}"/jcef-natives-macosx-amd64-jcef-"${jcef.maven.hash}"+cef-"${jcef.maven.ver}"+"${jcef.chrome.hash}"+chromium-"${jcef.chrome.ver}".jar!/jcef-natives-macosx-amd64-jcef-"${jcef.maven.hash}"+cef-"${jcef.maven.ver}"+"${jcef.chrome.hash}"+chromium-"${jcef.chrome.ver}".tar.gz"
	mac.aarch64 = "zip:"${jcef.releases}${jcef.maven.ver}"/jcef-natives-macosx-arm64-jcef-"${jcef.maven.hash}"+cef-"${jcef.maven.ver}"+"${jcef.chrome.hash}"+chromium-"${jcef.chrome.ver}".jar!/jcef-natives-macosx-arm64-jcef-"${jcef.maven.hash}"+cef-"${jcef.maven.ver}"+"${jcef.chrome.hash}"+chromium-"${jcef.chrome.ver}".tar.gz"
	windows.amd64 = "zip:"${jcef.releases}${jcef.maven.ver}"/jcef-natives-windows-amd64-jcef-"${jcef.maven.hash}"+cef-"${jcef.maven.ver}"+"${jcef.chrome.hash}"+chromium-"${jcef.chrome.ver}".jar!/jcef-natives-windows-amd64-jcef-"${jcef.maven.hash}"+cef-"${jcef.maven.ver}"+"${jcef.chrome.hash}"+chromium-"${jcef.chrome.ver}".tar.gz"
}

app {
	rdns-name = dev.hydraulic.jcef-conveyor
	version = 1
	site.base-url = "localhost:5000"

	inputs = [ target/jcef-conveyor-1.0-SNAPSHOT.jar ] ${app.inputs}

	machines = [ mac, windows.amd64 ]

	jvm {
		gui = jcefconveyor.SampleFrame

		// JCEF depends on some Java internals.
		// This section is optional because Conveyor will infer them if missing. However it's good to be explicit.
		options = ${app.jvm.options} [
			"--add-opens=java.desktop/java.awt.peer=ALL-UNNAMED"
			"--add-opens=java.desktop/sun.awt=ALL-UNNAMED"
			"--add-opens=java.desktop/sun.lwawt=ALL-UNNAMED"
			"--add-opens=java.desktop/sun.lwawt.macosx=ALL-UNNAMED"
		]
	}

	windows {
		inputs += target/appassembler/repo
		amd64.inputs += ${jcef.windows.amd64} -> jcef

		// JCEF expects install.lock to exist which isn't in the tarball, otherwise it tries to delete bits of the app!
		inputs += {
			content = "."
			to = jcef/install.lock
		}
	}

	mac {
		// CEF is a series of frameworks and helper apps. JCEF adds some extra files on top. We get them from the natives tarballs
		// that were downloaded by build.sh
		amd64.bundle-extras += {
			from = ${jcef.mac.amd64}
			to = Frameworks
		}
		aarch64.bundle-extras += {
			from = ${jcef.mac.aarch64}
			to = Frameworks
		}

		// JCEF expects install.lock to exist which isn't in the tarball, otherwise it tries to delete bits of the app!
		bundle-extras += {
			content = "."
			to = Frameworks/install.lock
		}

		// These keys are used by Electron and can also benefit JCEF apps.
		info-plist {
			NSSupportsAutomaticGraphicsSwitching = true
			NSRequiresAquaSystemAppearance = false
			NSHighResolutionCapable = true
			NSQuitAlwaysKeepsWindows = false

			LSEnvironment {
				MallocNanoZone = "0"
			}
			NSAppTransportSecurity {
				NSAllowsArbitraryLoads = true
			}
			NSBluetoothAlwaysUsageDescription = This app needs access to Bluetooth
			NSBluetoothPeripheralUsageDescription = This app needs access to Bluetooth
			NSCameraUsageDescription = This app needs access to the camera
		}
	}
}

conveyor.compatibility-level = 7
